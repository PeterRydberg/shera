generator client {
    provider = "prisma-client-js"
}

// datasource db {
//     provider = "sqlite"
//     url      = env("DATABASE_URL")
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])

    @@index([name])
}

model Events {
    eventId     Int         @id @default(autoincrement())
    description String
    title       String
    dateTime    DateTime
    place       String?
    hostId      String
    attendees   Attendees[]
    host        User        @relation(fields: [hostId], references: [id])
    posts       Posts[]
}

model Posts {
    postId    Int      @id @default(autoincrement())
    message   String
    authorId  String
    eventsId  Int
    createdAt DateTime @default(now())
    events    Events   @relation(fields: [eventsId], references: [eventId])
    author    User     @relation(fields: [authorId], references: [id])
}

model Attendees {
    attendeeId String  @id @default(cuid())
    name       String
    email      String?
    eventId    Int
    Events     Events  @relation(fields: [eventId], references: [eventId])

    @@unique([name, eventId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    Events        Events[]
    posts         Post[]
    Posts         Posts[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
