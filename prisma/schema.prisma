generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Event {
    eventId     Int        @id @default(autoincrement())
    publicId    String     @unique
    description String
    title       String
    place       String?
    hosts       User[]     @relation("EventHosts")
    dateTime    DateTime
    timeZone    String     @default("Europe/Oslo")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @default(now()) @updatedAt
    attendees   Attendee[]
    posts       Post[]
}

model Post {
    postId    Int      @id @default(autoincrement())
    authorId  String
    eventId   Int
    createdAt DateTime @default(now())
    message   String
    author    User     @relation(fields: [authorId], references: [id])
    event     Event    @relation(fields: [eventId], references: [eventId])
}

model Attendee {
    attendeeId String          @id @default(cuid())
    name       String
    email      String?
    eventId    Int
    event      Event           @relation(fields: [eventId], references: [eventId])
    status     AttendingStatus @default(GOING)
    userId     String?
    user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([eventId, userId])
}

enum AttendingStatus {
    GOING
    NOT_GOING
    MAYBE
    UNKNOWN
    INVITED
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    events        Event[]    @relation("EventHosts")
    posts         Post[]
    sessions      Session[]
    Attendee      Attendee[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
